# HAILEI Docker Compose Configuration
# Production-ready deployment with all services

version: '3.8'

services:
  # Main HAILEI API Service
  hailei-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hailei-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-hailei-production-secret-change-me}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - hailei-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hailei-api.rule=Host(`api.hailei.local`)"
      - "traefik.http.services.hailei-api.loadbalancer.server.port=8000"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: hailei-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - hailei-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hailei-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - hailei-network
    restart: unless-stopped
    depends_on:
      - hailei-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional - for production data persistence)
  postgres:
    image: postgres:15-alpine
    container_name: hailei-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-hailei}
      - POSTGRES_USER=${POSTGRES_USER:-hailei}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-hailei_secure_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - hailei-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hailei}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hailei-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - hailei-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hailei-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hailei-network
    restart: unless-stopped
    depends_on:
      - prometheus

# Volumes for data persistence
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  hailei-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16